<pre class="metadata">
Title: Subresource Integrity
Status: ED
ED: https://w3c.github.io/webappsec-subresource-integrity/
TR: http://www.w3.org/TR/SRI/
Shortname: SRI
Level: 1
Editor: Devdatta Akhawe, Dropbox Inc., dev.akhawe@gmail.com
Editor: Frederik Braun 68466, Mozilla, fbraun@mozilla.com
Editor: Francois Marier, Mozilla, francois@mozilla.com
Editor: Joel Weinberger, Google Inc., jww@google.com
Abstract:
  This specification defines a mechanism by which user agents may verify that a
  fetched resource has been delivered without unexpected manipulation.
Group: webappsec
Indent: 2
Version History: https://github.com/w3c/webappsec-subresource-integrity/commits/gh-pages
!Participate: <a href="https://github.com/w3c/webappsec-subresource-integrity/issues/new">File a bug </a> (<a href="https://github.com/w3c/webappsec-subresource-integrity/issues">open issues</a>)
</pre>
<pre class="anchors">
spec: RFC6797; urlPrefix: https://tools.ietf.org/html/rfc6797
  type: dfn
    text: Strict-Transport-Security; url: section-6.1

spec: RFC7469; urlPrefix: https://tools.ietf.org/html/rfc7469
  type: dfn
    text: Public Key Pinning; url: section-1
</pre>

# Introduction # {#intro}

<em> This section is not normative.</em>

Sites and applications on the web are rarely composed of resources from only a
single origin. For example, authors pull scripts and styles from a wide variety
of services and content delivery networks, and must trust that the delivered
representation is, in fact, what they expected to load. If an attacker can trick
a user into downloading content from a hostile server (via DNS [[RFC1035]]
poisoning, or other such means), the author has no recourse. Likewise, an
attacker who can replace the file on the Content Delivery Network (CDN) server
has the ability to inject arbitrary content.

Delivering resources over a secure channel mitigates some of this risk: with TLS
[[TLS]], HTTP Strict Transport Security (HSTS) [[RFC6797]], and Public Key
Pinning [[RFC7469]], a user agent can be fairly certain that it is indeed
speaking with the server it believes it's talking to. These mechanisms, however,
authenticate <em>only</em> the server, <em>not</em> the content. An attacker (or
administrator) with access to the server can manipulate content with impunity.
Ideally, authors would not only be able to pin the keys of a server, but also
pin the <em>content</em>, ensuring that an exact representation of a resource,
and <em>only</em> that representation, loads and executes.

This document specifies such a validation scheme, extending two HTML elements
with an <code>integrity</code> attribute that contains a cryptographic hash of
the representation of the resource the author expects to load. For instance, an
author may wish to load some framework from a shared server rather than hosting
it on their own origin. Specifying that the <em>expected</em> SHA-384 hash of
<code>https://example.com/example-framework.js</code> is
<code>Li9vy3DqF8tnTXuiaAJuML3ky+er10rcgNR/VqsVpcw+ThHmYcwiB1pbOxEbzJr7</code>
means that the user agent can verify that the data it loads from that URL
matches that expected hash before executing the JavaScript it contains. This
integrity verification significantly reduces the risk that an attacker can
substitute malicious content.

This example can be communicated to a user agent by adding the hash to a
<code>script</code> element, like so:

<div class="example">
  <pre>
    &lt;script src="https://example.com/example-framework.js"
            integrity="sha384-Li9vy3DqF8tnTXuiaAJuML3ky+er10rcgNR/VqsVpcw+ThHmYcwiB1pbOxEbzJr7"
            crossorigin="anonymous"&gt;&lt;/script&gt;
  </pre>
</div>

Scripts, of course, are not the only response type which would benefit from
integrity validation. The scheme specified here also applies to
<code>link</code> and future versions of this specification are likely to expand
this coverage.


## Goals ## {#goals}

1.  Compromise of a third-party service should not automatically mean
    compromise of every site which includes its scripts. Content authors
    will have a mechanism by which they can specify expectations for
    content they load, meaning for example that they could load a
    _specific_ script, and not _any_ script that happens to have a
    particular URL.

2.  The verification mechanism should have error-reporting functionality which
    would inform the author that an invalid response was received.

## Use Cases/Examples ## {#examples}

### Resource Integrity ### {#resource-integrity}

*   An author wishes to use a content delivery network to improve performance
    for globally-distributed users. It is important, however, to ensure that
    the CDN's servers deliver _only_ the code the author expects them to
    deliver. To mitigate the risk that a CDN compromise (or unexpectedly
    malicious behavior) would change that site in unfortunate ways, the
    following <a>integrity metadata</a> is added to the `link` element included
    on the page:

    <div class="example">
      <pre>
        &lt;link rel="stylesheet" href="https://site53.example.net/style.css"
              integrity="sha384-+/M6kredJcxdsqkczBUjMLvqyHb1K/JThDXWsBVxMEeZHEaMKEOEct339VItX1zB"
              crossorigin="anonymous">
      </pre>
    </div>

*   An author wants to include JavaScript provided by a third-party
    analytics service. To ensure that only the code that has been carefully
    reviewed is executed, the author generates <a>integrity metadata</a> for
    the script, and adds it to the `script` element:

    <div class="example">
      <pre>
        &lt;script src="https://analytics-r-us.example.com/v1.0/include.js"
                integrity="sha384-MBO5IDfYaE6c6Aao94oZrIOiC6CGiSN2n4QUbHNPhzk5Xhm0djZLQqTpL0HzTUxk"
                crossorigin="anonymous">&lt;/script>
      </pre>
    </div>

*   A user agent wishes to ensure that JavaScript code running in high-privilege
    HTML contexts (for example, a browser's New Tab page) aren't manipulated
    before display. <a>Integrity metadata</a> mitigates the risk that altered
    JavaScript will run in these pages' high-privilege contexts.

Insert def for <dfn>integrity metadata</dfn>.
